<!DOCTYPE html>
<html lang="en">
  <%- include('./../components/header') %>

  <body class="bg-gray-100 min-h-screen">
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <%- include('./../components/navbar') %>
    <div class="flex items-center justify-center p-6">
      <div
        class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-3xl space-y-6"
      >
        <h1 class="text-2xl font-bold text-gray-800">
          PDF Merger with Ordering
        </h1>

        <!-- File Upload -->
        <div
          class="border-2 border-dashed border-gray-400 rounded-xl p-6 text-center text-gray-600 hover:bg-gray-50 transition"
        >
          <p>Select or drag multiple PDF files</p>
          <input
            type="file"
            id="pdfInput"
            accept="application/pdf"
            multiple
            class="mt-3"
          />
        </div>

        <!-- Reorderable List -->
        <ul
          id="fileList"
          class="space-y-2 bg-gray-50 p-4 rounded-md border"
        ></ul>

        <!-- Merge Button -->
        <button
          id="mergeBtn"
          class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition"
        >
          Merge PDFs
        </button>
        <button
          id="clearBtn"
          class="bg-gray-600 text-white px-6 py-2 rounded hover:bg-gray-700 transition"
        >
          Clear
        </button>
        <p id="status" class="text-sm text-gray-500"></p>

        <!-- Preview & Download -->
        <div id="resultContainer" class="hidden space-y-3">
          <h2 class="text-lg font-medium">Merged PDF:</h2>
          <iframe
            id="pdfPreview"
            class="w-full h-[500px] border rounded-md"
          ></iframe>
          <a
            id="downloadLink"
            class="inline-block bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
            download="merged.pdf"
            >Download Merged PDF</a
          >
        </div>
      </div>
    </div>

    <script>
      const pdfInput = document.getElementById("pdfInput");
      const fileList = document.getElementById("fileList");
      const mergeBtn = document.getElementById("mergeBtn");
      const status = document.getElementById("status");
      const resultContainer = document.getElementById("resultContainer");
      const pdfPreview = document.getElementById("pdfPreview");
      const downloadLink = document.getElementById("downloadLink");
      const clearBtn = document.getElementById("clearBtn");

      let fileMap = new Map(); // key: unique ID, value: File

      function clearData() {
        // Clear file input
        pdfInput.value = "";

        // Clear displayed file list
        fileList.innerHTML = "";

        // Reset file map
        fileMap.clear();

        // Hide result container
        resultContainer.classList.add("hidden");
        pdfPreview.src = "";
        downloadLink.href = "";

        // Clear status message
        status.textContent = "";
      }

      clearBtn.addEventListener("click", clearData);

      pdfInput.addEventListener("change", () => {
        fileList.innerHTML = "";
        fileMap.clear();

        Array.from(pdfInput.files).forEach((file, index) => {
          const id = `${file.name}-${Date.now()}-${index}`;
          fileMap.set(id, file);

          const li = document.createElement("li");
          li.setAttribute("data-id", id);
          li.className =
            "bg-white p-2 border rounded shadow-sm flex justify-between items-center";
          li.innerHTML = `<span>${file.name}</span><span class="cursor-move text-gray-400">â‡…</span>`;
          fileList.appendChild(li);
        });

        Sortable.create(fileList, {
          animation: 150,
          ghostClass: "bg-blue-100",
        });
      });

      mergeBtn.addEventListener("click", async () => {
        const items = fileList.querySelectorAll("li[data-id]");
        if (items.length < 2) {
          status.textContent = "Please upload and arrange at least two PDFs.";
          return;
        }

        const formData = new FormData();
        items.forEach((li, index) => {
          const id = li.getAttribute("data-id");
          const file = fileMap.get(id);
          formData.append("pdfs", file); // order preserved
        });

        status.textContent = "Merging PDFs...";

        try {
          const res = await fetch("/api/pdf-merger", {
            method: "POST",
            body: formData,
          });

          if (!res.ok) throw new Error(await res.text());

          const blob = await res.blob();
          const blobUrl = URL.createObjectURL(blob);

          pdfPreview.src = blobUrl;
          downloadLink.href = blobUrl;
          resultContainer.classList.remove("hidden");
          status.textContent = "Merge complete!";
        } catch (err) {
          status.textContent = "Failed to merge PDFs.";
          console.error(err);
        }
      });
    </script>
    <%- include('./../components/footer') %>
  </body>
</html>
